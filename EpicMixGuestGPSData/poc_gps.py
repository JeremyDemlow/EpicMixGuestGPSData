# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_GPS_POC.ipynb.

# %% auto 0
__all__ = ['process_coordinate_string', 'kml2csv', 'create_circle_area_around_lifts']

# %% ../nbs/00_GPS_POC.ipynb 5
from polycircles import polycircles
from bs4 import BeautifulSoup

import pandas as pd
import os
import logging
import simplekml
import shutil

# %% ../nbs/00_GPS_POC.ipynb 13
def process_coordinate_string(str):
    space_splits = str.split(" ")
    ret = []
    for split in space_splits[1:]:
        comma_split = split.split(',')
        # Checks for len on the split, because depending on kml file generator you might get an empty 
        # string (which would be misinterpreted as a coordinate)
        if(len(split.split(',')) == 3):
            ret.append(comma_split[1])  # lat
            ret.append(comma_split[0])  # lng
    return ret

# %% ../nbs/00_GPS_POC.ipynb 15
def kml2csv(fname):
    """
    Open the KML. Read the KML. Open a CSV file. Process a coordinate string to be a CSV row.
    Input: Filename with extension ('example.kml'), located in 'kml' folder.
    Output: File with the same name as input, but in .csv format, located in 'csv' folder.
    """
    out_fname = fname.split('.kml')[0] + '.csv'
    with open(fname, 'r') as f:
        # Going to give an issue with this but xml has to many dependencies
        s = BeautifulSoup(f, "html.parser")
    
    # Find useful info from parsing
    for coords in s.find_all('coordinates'):
        data = process_coordinate_string(coords.string)
    
    # Space odditity with how this data comes in
    lats = [float(x) for index, x in enumerate(data) if index % 2 == 0]
    lons = [float(x) for index, x in enumerate(data) if index % 2 == 1]    
    df = pd.DataFrame({'lat' : lats, 'lon' : lons})
    return df

# %% ../nbs/00_GPS_POC.ipynb 17
def create_circle_area_around_lifts(df_lifts,
                                    file_name:str,
                                    kml_file_dir:str=None,
                                    number_of_vertices:int=36,
                                    radius:int=30,
                                    delete_kml:bool = True):
    result = []
    total_lifts = df_lifts.shape[0]
    logging.info(f'Total number of lifts being updated {total_lifts}')
    i = 0
    while i < total_lifts:
        kml = simplekml.Kml()
        kml.newpoint(name=df_lifts.liftname.iloc[i], coords=[(df_lifts.latitude.iloc[i], df_lifts.longitude.iloc[i])])
        location_kml_path = os.path.join(kml_file_dir, file_name)
        kml.save(location_kml_path)
        polycircle = polycircles.Polycircle(latitude=df_lifts.latitude.iloc[i],
                                           longitude=df_lifts.longitude.iloc[i],
                                           radius=radius, # Meters
                                           number_of_vertices=number_of_vertices)
        polycircle_kml = simplekml.Kml()
        circle = polycircle_kml.newpolygon(name=df_lifts.liftname.iloc[i], outerboundaryis=polycircle.to_kml())
        circle_path = os.path.join(kml_file_dir, f'{df_lifts.liftname.iloc[i]}_circle.kml')
        polycircle_kml.save(circle_path)
        df = kml2csv(circle_path)
        df[['liftname', 'resortname','resortkey']] = df_lifts[['liftname', 'resortname','resortkey']].iloc[i]
        if delete_kml:
            os.unlink(circle_path)
            os.unlink(location_kml_path)
        result.append(df)
        del df
        i += 1
    shutil.rmtree(kml_file_dir)
    return pd.concat(result)
